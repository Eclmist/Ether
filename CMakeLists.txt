#
#    This file is part of Ether, an open-source DirectX12 renderer.
#   
#    Copyright (c) 2020-2023 Samuel Huang - All rights reserved.
#   
#    Ether is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#   
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU General Public License for more details.
#   
#    You should have received a copy of the GNU General Public License
#    along with this program. If not, see <http://www.gnu.org/licenses/>.
#   

cmake_minimum_required (VERSION "3.18")

# =========================================================================== #
#                     PROJECT DEFINITIONS & PROPERTIES                        #
# =========================================================================== #

# Setup the name of the solution. This will change some of the directories naming convention
# generated by CMake. Ignore CXX in the second param since CMake supports C++ by default
project (Ether)

set(ENGINE_PROJECT_DX12 ${PROJECT_NAME}.Engine.Dx12)
set(TOOLMODE_PROJECT ${PROJECT_NAME}.Toolmode)

set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT ${TOOLMODE_PROJECT})

# Sets the C++ versions
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Sets project output directories
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin/win32)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin/win32)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin/win32)

# =========================================================================== #
#                        ADD SOURCE FILES TO PROJECT                          #
# =========================================================================== #

include_directories("${CMAKE_CURRENT_SOURCE_DIR}/src")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/resource")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/include")

file(GLOB_RECURSE project_headers src/*.h)
file(GLOB_RECURSE project_cpps src/*.cpp)
file(GLOB_RECURSE project_shaders src/*.hlsl)
file(GLOB_RECURSE project_hints src/*cpp.hint)
file(GLOB_RECURSE extern_files include/*)
file(GLOB_RECURSE resources resource/*)
set_source_files_properties(${project_shaders} PROPERTIES VS_TOOL_OVERRIDE "None")
set_source_files_properties(src/ether.cpp PROPERTIES COMPILE_FLAGS "/Ycether.h")

set(all_files ${project_headers} ${project_cpps} ${project_shaders}  ${project_hints} ${extern_files} ${resources})
set(engine_files_only ${all_files})
list(FILTER engine_files_only EXCLUDE REGEX "src/toolmode/*")

# =========================================================================== #
#                          SET COMPILATION TARGETS                            #
# =========================================================================== #

# ================================= ENGINE ================================== #


set(dx12_files_only ${engine_files_only})
list(FILTER dx12_files_only EXCLUDE REGEX "src/graphic/rhi/agc/*")

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${dx12_files_only})
add_library(${ENGINE_PROJECT_DX12} SHARED ${dx12_files_only})

target_compile_definitions(${ENGINE_PROJECT_DX12} PRIVATE ETH_ENGINE)
target_compile_definitions(${ENGINE_PROJECT_DX12} PRIVATE ETH_GRAPHICS_DX12)
target_compile_definitions(${ENGINE_PROJECT_DX12} PRIVATE ETH_PLATFORM_WIN32)

target_compile_options(${ENGINE_PROJECT_DX12} PRIVATE "/Yuether.h")
target_compile_options(${ENGINE_PROJECT_DX12} PRIVATE "/FIether.h")

# ================================ TOOLMODE ================================= #

add_executable(${TOOLMODE_PROJECT} WIN32 ${all_files})
target_compile_definitions(${TOOLMODE_PROJECT} PRIVATE ETH_TOOLMODE)
target_compile_definitions(${TOOLMODE_PROJECT} PRIVATE ETH_GRAPHICS_DX12)
target_compile_definitions(${TOOLMODE_PROJECT} PRIVATE ETH_PLATFORM_WIN32)

target_compile_options(${TOOLMODE_PROJECT} PRIVATE "/Yuether.h")
target_compile_options(${TOOLMODE_PROJECT} PRIVATE "/FIether.h")

set_property(TARGET ${TOOLMODE_PROJECT} PROPERTY VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_CFG_INTDIR}")


# =========================================================================== #
#                          LINK EXTERNAL LIBRARIES                            #
# =========================================================================== #

target_link_libraries(${ENGINE_PROJECT_DX12} 
    d3d12.lib dxgi.lib dxguid.lib 
    ${CMAKE_CURRENT_SOURCE_DIR}/include/dxc/dxcompiler.lib 
    ${CMAKE_CURRENT_SOURCE_DIR}/include/pix/WinPixEventRuntime.lib
    ${CMAKE_CURRENT_SOURCE_DIR}/include/optick/OptickCore.lib
)

target_link_libraries(${TOOLMODE_PROJECT}
    d3d12.lib dxgi.lib dxguid.lib ws2_32.lib
    ${CMAKE_CURRENT_SOURCE_DIR}/include/dxc/dxcompiler.lib
    ${CMAKE_CURRENT_SOURCE_DIR}/include/pix/WinPixEventRuntime.lib
    ${CMAKE_CURRENT_SOURCE_DIR}/include/optick/OptickCore.lib
)

# =========================================================================== #
#                             INCLUDE SUBPROJECTS                             #
# =========================================================================== #

add_subdirectory(sampleapp)

