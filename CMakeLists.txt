#
#    This file is part of Ether, an open-source DirectX12 renderer.
#   
#    Copyright (c) 2020-2021 Samuel Van Allen - All rights reserved.
#   
#    Ether is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#   
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#   
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   

cmake_minimum_required (VERSION "3.14.4")

# Setup the name of the solution. This will change some of the directories naming convention
# generated by CMake. Ignore CXX in the second param since CMake supports C++ by default
project (Ether)
set(CMAKE_CONFIGURATION_TYPES Release Debug)

# Ensure running on Windows
if (NOT WIN32)
    message(FATAL_ERROR "${PROJECT_NAME} is a DirectX 12 project and thus only supported on Windows 10! CMake will exit.")
endif ()

# Sets the C++ versions
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED true)

# Disable generation of ZERO_CHECK project
set(CMAKE_SUPPRESS_REGENERATION true)

# Set the project source directories. This is set when running the CMake GUI
set(ETH_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(ETH_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})

# Enable multi-thread compiling.
include(ProcessorCount)
ProcessorCount(N)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP${N}")

# Include directories
# In GCC, this will invoke the "-I" command on project_root/include/
include_directories(include)

include_directories("${ETH_SOURCE_DIR}/src")

# Find all source files and group them by directory
# I have no clue how this actually works, this macro was taken from SORT
macro (source_group_by_dir source_files)
    set(sgbd_cur_dir ${ETH_SOURCE_DIR}/src)
    foreach (sgbd_file ${${source_files}})
	    string(REGEX REPLACE ${sgbd_cur_dir}/\(.*\) \\1 sgbd_fpath ${sgbd_file})
	    string(REGEX REPLACE "\(.*\)/.*" \\1 sgbd_group_name ${sgbd_fpath})
	    string(COMPARE EQUAL ${sgbd_fpath} ${sgbd_group_name} sgbd_nogroup)
	    string(REPLACE "/" "\\" sgbd_group_name ${sgbd_group_name})
	    if (sgbd_nogroup)
	        set(sgbd_group_name "\\" )
	    endif (sgbd_nogroup)
	    source_group(${sgbd_group_name} FILES ${sgbd_file})
    endforeach (sgbd_file)
endmacro (source_group_by_dir)

file(GLOB_RECURSE project_headers src/*.h)
file(GLOB_RECURSE project_cpps src/*.cpp)

set(all_files ${project_headers} ${project_cpps})
source_group_by_dir(all_files)

file(GLOB_RECURSE extern_headers include/*.h)
file(GLOB_RECURSE extern_cpps include/*.cpp)
set(extern_files ${extern_headers} ${extern_cpps})

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${ETH_SOURCE_DIR}/bin/release")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${ETH_SOURCE_DIR}/bin/debug")

add_executable(Ether WIN32 ${all_files})
set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT Ether)

# Set output name for different configs
set_target_properties(Ether PROPERTIES RELEASE_OUTPUT_NAME "ether_win32_release")
set_target_properties(Ether PROPERTIES DEBUG_OUTPUT_NAME "ether_win32_debug")

# Link DX12
target_link_libraries(Ether d3d12.lib dxgi.lib dxguid.lib)

# Link /includes/
ADD_LIBRARY(ImGui ${extern_files})
target_link_libraries(Ether ImGui)
